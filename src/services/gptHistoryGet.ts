import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import { v4 as uuidv4 } from 'uuid';
import { History, StoryTiming, Word, WordTiming } from '../types/hystory';
import { downloadImage } from '../utils/downloadImage';
import { splitGermanText } from '../utils/splitGermanText';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const historyFilePath = path.join(__dirname, '../../data/stories.json');
const AUDIO_DIR = path.join(__dirname, '../../public/audio');
if (!fs.existsSync(AUDIO_DIR)) {
  fs.mkdirSync(AUDIO_DIR, { recursive: true });
}

// --- 1Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
export const readHistory = (): History[] => {
  if (!fs.existsSync(historyFilePath)) return [];
  const data = fs.readFileSync(historyFilePath, 'utf-8').trim();
  if (!data) return [];
  try {
    return JSON.parse(data);
  } catch {
    return [];
  }
};

// --- 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å) ---
export const saveHistory = (story: History) => {
  const histories = readHistory();
  histories.push(story);
  fs.writeFileSync(historyFilePath, JSON.stringify(histories, null, 2), 'utf-8');
};

// --- 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ GPT ---
export const historyGetGPT = async (initialHistory: string): Promise<History> => {
  const emptyStory: History = {
    id: ' ',
    title: { ru: '', de: '' },
    description: '',
    fullStory: { de: '', ru: '' },
    languageLevel: 'A1',
    image: '',
    isNew: true,
    audioUrl: '',
    wordTiming: [],
    words: [],
  };

  // --- 4Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ ChatGPT ---
  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    temperature: 0.5,
    messages: [
      {
        role: 'system',
        content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–µ–º–µ—Ü–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π, –æ–ø—Ä–µ–¥–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∑–∞–ø–∏—à–∏ –≤ languageLevel. –≤ fullStory –∑–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
–ó–∞–ø–æ–ª–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ:
${JSON.stringify(emptyStory, null, 2)}. 
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ–ª–µ–π:
- title.de ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º)
- title.ru ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
- fullStory.de ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º)
- fullStory.ru ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
- languageLevel ‚Äî –æ—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ (A1‚ÄìC2)
–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω—è–π, –æ—Å—Ç–∞–≤—å –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.`,
      },
      { role: 'user', content: initialHistory },
    ],
  });

  const gptText = completion.choices[0].message?.content || '';
  let parsedStory: History;

  try {
    parsedStory = JSON.parse(gptText);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT:', e);
    console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', gptText);
    throw new Error('GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.');
  }

  // --- 5Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ---
  parsedStory.id = uuidv4();

  // --- üîπ 5Ô∏è‚É£ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
  const words = splitGermanText(parsedStory.fullStory.de);

  // --- üîπ 6Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–≤
  const prompt = `
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç –∏ –≤–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–æ–≤.

–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º–∞—Ç–∞:
{
  "type": "verb" | "noun" | "other",
  "word": string | { "singular": string; "plural": string },
  "translation": string // –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
}

–ü—Ä–∞–≤–∏–ª–∞:
1. –ï—Å–ª–∏ —Å–ª–æ–≤–æ ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ:
   - –≤–∫–ª—é—á–∏ —Ñ–æ—Ä–º—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞;
   - –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ –¥–æ–±–∞–≤–ª—è–π –∞—Ä—Ç–∏–∫–ª—å (der, die, das) –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º;
   - –≤ —Ñ–æ—Ä–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–æ–±–∞–≤–ª—è–π –∞—Ä—Ç–∏–∫–ª—å "die" (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç);
   - –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—Ç–∞–≤—å null;
   –ü—Ä–∏–º–µ—Ä: 
   {
     "type": "noun",
     "word": { "singular": "der Hund", "plural": "die Hunde" },
     "translation": "—Å–æ–±–∞–∫–∞"
   }

2. –ï—Å–ª–∏ —Å–ª–æ–≤–æ ‚Äî –∞—Ä—Ç–∏–∫–ª—å (der, die, das, ein, eine, einen, einer –∏ —Ç.–¥.):
   - —Ç–∏–ø —Å—Ç–∞–≤—å "other";
   - –ø–µ—Ä–µ–≤–æ–¥ –¥–∞–≤–∞–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å –º—É–∂—Å–∫–æ–≥–æ —Ä–æ–¥–∞").

3. –ï—Å–ª–∏ —Å–ª–æ–≤–æ ‚Äî –≥–ª–∞–≥–æ–ª, –ø–µ—Ä–µ–≤–æ–¥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "geht" ‚Üí "–∏–¥—ë—Ç").

4. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ JSON.


–¢–µ–∫—Å—Ç:
${parsedStory.fullStory.de}

–°–ª–æ–≤–∞:
${words.join(', ')}
`;

  // --- üîπ 7Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ ChatGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–≤
  const completionWords = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [{ role: 'user', content: prompt }],
    temperature: 0.2,
  });

  const content = completionWords.choices[0]?.message?.content?.trim();
  if (!content) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ª–æ–≤');

  try {
    // –ò—â–µ–º JSON-–º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ
    const jsonMatch = content.match(/\[.*\]/s);
    if (!jsonMatch) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ GPT (analyze words)');

    const parsedWords: Word[] = JSON.parse(jsonMatch[0]);
    parsedStory.words = parsedWords; // <---- –≤–æ—Ç –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞!
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Å–ª–æ–≤:', err);
    console.error('–û—Ç–≤–µ—Ç GPT:', content);
    parsedStory.words = [];
  }

  // --- üîπ 8Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

  const imageResponse = await openai.images.generate({
    model: 'dall-e-3',
    prompt: `
    Create a high-quality, realistic illustration based on the following story.
    Analyze the text to understand its setting, characters, emotions, and key objects.
    The image should visually represent the story's main idea or mood.
    Do not include any text, words, or labels on the image.
    Use a natural color palette and cinematic lighting.
    
    Story content:
    """${initialHistory}"""
  `,
    size: '1024x1024',
    quality: 'standard',
  });

  const imageUrl: string = imageResponse.data && imageResponse.data[0]?.url ? imageResponse.data[0].url : '–ù–ï–¢ URL';

  let localImagePath = '';
  // –µ—Å–ª–∏ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º
  if (imageUrl) {
    const fileName = `${parsedStory.id}.png`;
    localImagePath = await downloadImage(imageUrl, fileName);
  }

  parsedStory.image = localImagePath || 'https://via.placeholder.com/1024?text=No+Image';

  ////////////////////////////////////////////////////////////////////////////////
  // -------------------------------
  // 1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ TTS
  // -------------------------------
  const textToSpeak = parsedStory.fullStory.de; // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏

  const ttsResponse = await openai.audio.speech.create({
    model: 'gpt-4o-mini-tts', // –∏–ª–∏ "tts-1", "tts-1-hd"
    voice: 'alloy',
    input: textToSpeak,
    response_format: 'mp3',
    speed: 1.0,
  });

  const audioBuffer = Buffer.from(await ttsResponse.arrayBuffer());
  const audioFilename = `${parsedStory.id}.mp3`;
  const audioPath = path.join(AUDIO_DIR, audioFilename);
  fs.writeFileSync(audioPath, audioBuffer);
  parsedStory.audioUrl = `/audio/${audioFilename}`;

  // -------------------------------
  // 2Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper –¥–ª—è —Ç–∞–π–º–∏–Ω–≥–æ–≤
  // -------------------------------
  const transcription = await openai.audio.transcriptions.create({
    file: fs.createReadStream(audioPath),
    model: 'whisper-1',
    response_format: 'verbose_json', // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã —Å —Ç–∞–π–º–∏–Ω–≥–∞–º–∏
    temperature: 0,
  });

  // -------------------------------
  // 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º wordTiming[]
  // -------------------------------
  const wordTiming: WordTiming[] = [];

  if (transcription.segments && transcription.segments.length > 0) {
    transcription.segments.forEach((segment: any) => {
      const words = segment.text.trim().split(/\s+/);
      const duration = segment.end - segment.start;
      const wordDuration = duration / words.length;

      words.forEach((word: string, idx: number) => {
        wordTiming.push({
          word,
          start: segment.start + idx * wordDuration,
          end: segment.start + (idx + 1) * wordDuration,
        });
      });
    });
  }

  // -------------------------------
  // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ –≤ JSON
  // -------------------------------
  const storyTiming: StoryTiming = {
    text: textToSpeak, // ‚úÖ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    wordTiming,
  };

  const timingFilename = `${parsedStory.id}-timing.json`;
  const timingPath = path.join(AUDIO_DIR, timingFilename);
  fs.writeFileSync(timingPath, JSON.stringify(storyTiming, null, 2));

  parsedStory.wordTiming = wordTiming;

  /////////////////////////////////////////////////////////////////////////////////

  // --- üîπ 9Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é

  saveHistory(parsedStory);

  console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', parsedStory.title.de);
  return parsedStory;
};
